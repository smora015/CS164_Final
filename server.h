#ifndef __SERVER_H__
#define __SERVER_H__

// Macros
#define MAX_USERS 5
#define MAX_MESSAGES 255
#define MAX_LENGTH 10       // Username length and half of password length
#define MAX_TWEET_LENGTH 140

// Declare structs
typedef struct messages_struct {
  char from[MAX_LENGTH];
  int offline;
  char message[MAX_TWEET_LENGTH];
} message;

typedef struct hashtag_struct {
  char* hashtag;
  char messages[MAX_MESSAGES][30];
  int count;
} hashtag;

typedef struct user_struct {
  // Identification variables
  char username[MAX_LENGTH];
  char password[MAX_LENGTH*2];
  int* sockfd;                      // The current socket the user is associated to

  // Data variables
  char subs[MAX_USERS][MAX_LENGTH]; // Keeps track of current subscriptions
  message messages[MAX_MESSAGES];   // Keeps track of sent but not delivered messages
  hashtag hashtags[30];

  // Status variables
  int online;                       // Determines if user is online
  int message_count;                // The number of messages
  int hashtag_count;                // The number of hashtags
} user;

// Declare socket descriptors
int sockfd;            // Socket file descriptor
int newsockfd;         // New socket file descriptor

// Declared client variables
char buffer[512];      // Buffer to hold messages
int n = 0;             // Used to read/write from/to socket
int current_menu;       // Corresponds to what menu the user is in

// Declare shared server variables
user* users;            // List of total users
user* current_user;     // A pointer to the current user logged in
int* messages_received;  // Keeps track of number of messages received

// Error handling functions
void error(const char *msg);
void handle_signal( int signal );

// Initialization functions
user create_user( char* username, char* password, int sockfd);
user get_user( char* username );
void init_data();
void authenticate_user();

// Interface functions
void get_input();
void handle_menu();
void handle_offline_messages();
user subscribe_to();
user unsubscribe_to();
void handle_subscriptions();
char* get_current_subscriptions();
char* get_available_subscriptions();
void handle_subscriptions();
void view_messages( int real_time );
void post_message();
void handle_post_message();
void handle_hashtags();

#endif /* __SERVER_H__ */


/*    Client Side Specifications:

   DONE   1. Prompt the user for their username and password
   DONE   2. Provide a welcome message that displays number of new messages
   DONE   3. Provide a menu for the user to select valid options. Should be a way to navigate back
   DONE   4. Menu option: See Offline Messages
   DONE   5. Menu option: Edit Subscriptions
   DONE   6. Menu option: Post a message
   DONE   7. Menu option: Logout
   DONE   8. Display messages in realtime
   9. Menu option: hashtag search (get last 10 hashtags generated by any of the user's subscriptions) */
